# -*- coding: utf-8 -*-
"""B_2010511051_Riandra Putra Pratama.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rKx1p4YcPrX_Rfn3M5IyPNBQZWCvDy24
"""

import pandas as pd
# File CSV
csv_path ="https://archive.ics.uci.edu/ml/machine-learning-databases/hepatitis/hepatitis.data"
# memberi nama kolom
headers=["Class", "AGE", "SEX", "STEROID", "ANTIVIRALS","FATIGUE","MALAISE","ANOREXIA","LIVER BIG","LIVER FIRM","SPLEEN ALPABLE","SPIDERS","ASCITES","VARICES","BILIRUBIN","ALK PHOSPHATE","SGOT","ALBUMIN","PROTIME","HISTOLOGY"]
df = pd.read_csv(csv_path)
df.columns=headers
df.head()

df[['AGE','SEX','STEROID']]

df.iloc[:,1:4]

"""**Mengidentifikasi dan menangani missing value**"""

# mengkonversi ? (tanda tanya) ke NaN
import numpy as np

# replace "?" to NaN
df.replace("?", np.nan, inplace = True)
df.head(5)

# metode untuk menghitung true saja (jmlh missing value saja)
df.isnull().sum()

# mereplace missing value pada BILIRUBIN,ALK PHOSPHATE, SGOT, ALBUMIN, PROTIME dengan rata-rata
avg_bili = df["BILIRUBIN"].astype("float").mean(axis=0)
df["BILIRUBIN"].replace(np.nan, avg_bili, inplace=True)
avg_alk = df["ALK PHOSPHATE"].astype("float").mean(axis=0)
df["ALK PHOSPHATE"].replace(np.nan, avg_alk, inplace=True)
avg_sgot = df["SGOT"].astype("float").mean(axis=0)
df["SGOT"].replace(np.nan, avg_sgot, inplace=True)
avg_albu = df["ALBUMIN"].astype("float").mean(axis=0)
df["ALBUMIN"].replace(np.nan, avg_albu, inplace=True)
avg_protime = df["PROTIME"].astype("float").mean(axis=0)
df["PROTIME"].replace(np.nan, avg_protime, inplace=True)

# mereplace missing value pada fitur lainnya (yang mengandung missing value) dengan nilai yang memiliki frekuensi terbanyak
# menghitung nilai mana yang paling banyak pada kolom STEROID kemudian mereplace dengan nilai tersebut
VAL_STE=df['STEROID'].value_counts().idxmax()
df["STEROID"].replace(np.nan, VAL_STE, inplace=True)
# menghitung nilai mana yang paling banyak pada kolom FATIGUE kemudian mereplace dengan nilai tersebut
VAL_FAT=df['FATIGUE'].value_counts().idxmax()
df["FATIGUE"].replace(np.nan, VAL_FAT, inplace=True)
# menghitung nilai mana yang paling banyak pada kolom MALAISE kemudian mereplace dengan nilai tersebut
VAL_MAL=df['MALAISE'].value_counts().idxmax()
df["MALAISE"].replace(np.nan, VAL_MAL, inplace=True)
# menghitung nilai mana yang paling banyak pada kolom ANOREXIA kemudian mereplace dengan nilai tersebut
VAL_ANO=df['ANOREXIA'].value_counts().idxmax()
df["ANOREXIA"].replace(np.nan, VAL_ANO, inplace=True)
# menghitung nilai mana yang paling banyak pada kolom LIVER BIG kemudian mereplace dengan nilai tersebut
VAL_LIVB=df['LIVER BIG'].value_counts().idxmax()
df["LIVER BIG"].replace(np.nan, VAL_LIVB, inplace=True)
# menghitung nilai mana yang paling banyak pada kolom LIVER FIRM kemudian mereplace dengan nilai tersebut
VAL_LIVF=df['LIVER FIRM'].value_counts().idxmax()
df["LIVER FIRM"].replace(np.nan, VAL_LIVF, inplace=True)
# menghitung nilai mana yang paling banyak pada kolom SPLEEN ALPABLE kemudian mereplace dengan nilai tersebut
VAL_SPL=df['SPLEEN ALPABLE'].value_counts().idxmax()
df["SPLEEN ALPABLE"].replace(np.nan, VAL_SPL, inplace=True)
# menghitung nilai mana yang paling banyak pada kolom SPIDERS kemudian mereplace dengan nilai tersebut
VAL_SPI=df['SPIDERS'].value_counts().idxmax()
df["SPIDERS"].replace(np.nan, VAL_SPI, inplace=True)
# menghitung nilai mana yang paling banyak pada kolom ASCITES kemudian mereplace dengan nilai tersebut
VAL_ASC=df['ASCITES'].value_counts().idxmax()
df["ASCITES"].replace(np.nan, VAL_ASC, inplace=True)
# menghitung nilai mana yang paling banyak pada kolom VARICES kemudian mereplace dengan nilai tersebut
VAL_LIFB=df['VARICES'].value_counts().idxmax()
df["VARICES"].replace(np.nan, VAL_LIFB, inplace=True)

# mengecek apakah masih ada missing value atau tidak
df.isnull().sum()

# meihat tipe datasetiap kolom
df.dtypes

# Memperbaiki format tipe data
# mengubah tipe data  STEROID, FATIGUE, MALAISE, ANOREXIA, LIVER BIG, LIVER FIRM, SPLEEN ALPABLE, SPIDERS, ASCITES, VARICES menjadi integer
df[[ 'STEROID', 'FATIGUE', 'MALAISE', 'ANOREXIA', 'LIVER BIG', 'LIVER FIRM', 'SPLEEN ALPABLE', 'SPIDERS', 'ASCITES', 'VARICES']]= df[[ 'STEROID', 'FATIGUE', 'MALAISE', 'ANOREXIA', 'LIVER BIG', 'LIVER FIRM', 'SPLEEN ALPABLE', 'SPIDERS', 'ASCITES', 'VARICES']].astype('int')
# BILIRUBIN, ALK PHOSPHATE, SGOT, ALBUMIN dan PROTIME menjadi float
df[["BILIRUBIN", "ALK PHOSPHATE", "SGOT", "ALBUMIN", "PROTIME"]] = df[["BILIRUBIN", "ALK PHOSPHATE", "SGOT", "ALBUMIN", "PROTIME"]].astype("float")

# hasil setelah diubah
df.dtypes

"""**Normalisasi**"""

# gunakan normalisasi min-max pada kolom AGE, BILIRUBIN, ALK PHOSPHATE, SGOT, ALBUMIN, PROTIME dengan nilai MIN = 0.1 dan MAX = 0.9
#min-max untuk AGE
df['AGE'] = (df['AGE']-df['AGE'].min())/(df['AGE'].max()-df['AGE'].min())*(0.9-0.1)+0.1
#min-max untuk BILIRUBIN
df['BILIRUBIN'] = (df['BILIRUBIN']-df['BILIRUBIN'].min())/(df['BILIRUBIN'].max()-df['BILIRUBIN'].min())*(0.9-0.1)+0.1
#min-max untuk ALK PHOSPHATE
df['ALK PHOSPHATE'] = (df['ALK PHOSPHATE']-df['ALK PHOSPHATE'].min())/(df['ALK PHOSPHATE'].max()-df['ALK PHOSPHATE'].min())*(0.9-0.1)+0.1
#min-max untuk SGOT
df['SGOT'] = (df['SGOT']-df['SGOT'].min())/(df['SGOT'].max()-df['SGOT'].min())*(0.9-0.1)+0.1
#min-max untuk ALBUMIN
df['ALBUMIN'] = (df['ALBUMIN']-df['ALBUMIN'].min())/(df['ALBUMIN'].max()-df['ALBUMIN'].min())*(0.9-0.1)+0.1
#min-max untuk PROTIME
df['PROTIME'] = (df['PROTIME']-df['PROTIME'].min())/(df['PROTIME'].max()-df['PROTIME'].min())*(0.9-0.1)+0.1



# Hasil
df.describe()

# klasifikasi naive bayes
from sklearn.naive_bayes import MultinomialNB

#buat objek model Naive Bayes
model = MultinomialNB()

#Latih dengan data
model.fit(df[['SEX','FATIGUE','SPIDERS','ANOREXIA', 'LIVER BIG']], df['Class'])

predicted = model.predict([[2,2,2,1,1]])
print ("Predicted Value:", predicted)

probabilitas = model.predict_proba([[2,2,2,1,1]])
probabilitas

# Decision Tree

from sklearn.tree import DecisionTreeClassifier
dtree = DecisionTreeClassifier()
dtree = dtree.fit(df[['SEX','FATIGUE','SPIDERS','ANOREXIA', 'LIVER BIG']],df['Class'])
from sklearn import tree
from sklearn.tree import export_text
tree.plot_tree(dtree.fit(df[['SEX','FATIGUE','SPIDERS','ANOREXIA', 'LIVER BIG']],df['Class']))
r = export_text(dtree,feature_names=['SEX','FATIGUE','SPIDERS','ANOREXIA', 'LIVER BIG'])
print(r)

#prediksi data
ypred=dtree.predict([[2,2,2,1,1]])
ypred