# -*- coding: utf-8 -*-
"""tugasP5_2010511051.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14S84wo-JtWcby8sryT_6HPRFHTUp04jm

Nama : Riandra Putra Pratama

Nim : 2010511051

Kelas : Praktikum data mining dan data warehous B

# **TUGAS PERTEMUAN 5 : NAIVE BAYES**

**membangun Model naive bayes, mengunakan dataset hepatitis dan ambil fitur dengan tipe kategorikal. Gunakan 70% record untuk digunakan untuk membangun model dan 30% record untuk menguji model.**
"""

import pandas as pd
csv_path = 'https://archive.ics.uci.edu/ml/machine-learning-databases/hepatitis/hepatitis.data'
headers=['Class', 'AGE', 'SEX', 'STEROID','ANTIVIRALS', 'FATIGUE', 'MALAISE','ANOREXIA', 'LIVER BIG', 'LIVER FIRM','SPLEEN ALPABLE', 'SPIDERS', 'ASCITES', 'VARICES','BILIRUBIN', 'ALK PHOSPHATE', 'SGOT', 'ALBUMIN', 'PROTIME', 'HISTOLOGY']
df = pd.read_csv(csv_path, names = headers)

# Cek hasil import dan pemberian header
df.head()

# mengecek tipe data dari setiap kolom
df.dtypes

"""# **Menidentifikasi dan menghandle missing value (Data Cleaning)**"""

# mengkonversi ? (tanda tanya) ke NaN
import numpy as np

# replace "?" to NaN
df.replace("?", np.nan, inplace = True)
df.head(5)

# mengidentifikasi missing value dengan isnull
missing_data = df.isnull()
missing_data.head()

# metode untuk menghitung true saja (jmlh missing value saja)
df.isnull().sum()

"""**Menangani Missing value**

<b>mereplace dengan mean untuk data numerical:</b>
<ul>
BILIRUBIN          6<br>
ALK PHOSPHATE     29<br>
SGOT               4<br>
ALBUMIN           16<br>
PROTIME           67<br>
</ul>
"""

# menghitung rata - rata BILIRUBIN kemudian mengganti NaN dengan rata - rata tersebut
avg_bili = df["BILIRUBIN"].astype("float").mean(axis=0)
df["BILIRUBIN"].replace(np.nan, avg_bili, inplace=True)
# menghitung rata - rata ALKPHOSPATE kemudian mengganti NaN dengan rata - rata tersebut
avg_alk = df["ALK PHOSPHATE"].astype("float").mean(axis=0)
df["ALK PHOSPHATE"].replace(np.nan, avg_alk, inplace=True)
# menghitung rata - rata SGOT kemudian mengganti NaN dengan rata - rata tersebut
avg_sgot = df["SGOT"].astype("float").mean(axis=0)
df["SGOT"].replace(np.nan, avg_sgot, inplace=True)
# menghitung rata - rata ALBUMIN kemudian mengganti NaN dengan rata - rata tersebut
avg_albu = df["ALBUMIN"].astype("float").mean(axis=0)
df["ALBUMIN"].replace(np.nan, avg_albu, inplace=True)
#menghitung rata - rata PROTIME kemudian mengganti NaN dengan rata - rata tersebut
avg_protime = df["PROTIME"].astype("float").mean(axis=0)
df["PROTIME"].replace(np.nan, avg_protime, inplace=True)

"""<b>mereplace dengan frequency (modus/yang paling sering muncul):</b> misal fitur dengan tipe kategorikal/boolean
<ul>
STEROID            1<br>
FATIGUE            1<br>
MALAISE            1<br>
ANOREXIA           1<br>
LIVER BIG         10<br>
LIVER FIRM        11<br>
SPLEEN ALPABLE     5<br>
SPIDERS            5<br>
ASCITES            5<br>
VARICES            5<br>
</ul>
"""

# menghitung nilai mana yang paling banyak pada kolom STEROID kemudian mereplace dengan nilai tersebut
VAL_STE=df['STEROID'].value_counts().idxmax()
df["STEROID"].replace(np.nan, VAL_STE, inplace=True)
# menghitung nilai mana yang paling banyak pada kolom FATIGUE kemudian mereplace dengan nilai tersebut
VAL_FAT=df['FATIGUE'].value_counts().idxmax()
df["FATIGUE"].replace(np.nan, VAL_FAT, inplace=True)
# menghitung nilai mana yang paling banyak pada kolom MALAISE kemudian mereplace dengan nilai tersebut
VAL_MAL=df['MALAISE'].value_counts().idxmax()
df["MALAISE"].replace(np.nan, VAL_MAL, inplace=True)
# menghitung nilai mana yang paling banyak pada kolom ANOREXIA kemudian mereplace dengan nilai tersebut
VAL_ANO=df['ANOREXIA'].value_counts().idxmax()
df["ANOREXIA"].replace(np.nan, VAL_ANO, inplace=True)
# menghitung nilai mana yang paling banyak pada kolom LIVER BIG kemudian mereplace dengan nilai tersebut
VAL_LIVB=df['LIVER BIG'].value_counts().idxmax()
df["LIVER BIG"].replace(np.nan, VAL_LIVB, inplace=True)
# menghitung nilai mana yang paling banyak pada kolom LIVER FIRM kemudian mereplace dengan nilai tersebut
VAL_LIVF=df['LIVER FIRM'].value_counts().idxmax()
df["LIVER FIRM"].replace(np.nan, VAL_LIVF, inplace=True)
# menghitung nilai mana yang paling banyak pada kolom SPLEEN ALPABLE kemudian mereplace dengan nilai tersebut
VAL_SPL=df['SPLEEN ALPABLE'].value_counts().idxmax()
df["SPLEEN ALPABLE"].replace(np.nan, VAL_SPL, inplace=True)
# menghitung nilai mana yang paling banyak pada kolom SPIDERS kemudian mereplace dengan nilai tersebut
VAL_SPI=df['SPIDERS'].value_counts().idxmax()
df["SPIDERS"].replace(np.nan, VAL_SPI, inplace=True)
# menghitung nilai mana yang paling banyak pada kolom ASCITES kemudian mereplace dengan nilai tersebut
VAL_ASC=df['ASCITES'].value_counts().idxmax()
df["ASCITES"].replace(np.nan, VAL_ASC, inplace=True)
# menghitung nilai mana yang paling banyak pada kolom VARICES kemudian mereplace dengan nilai tersebut
VAL_LIFB=df['VARICES'].value_counts().idxmax()
df["VARICES"].replace(np.nan, VAL_LIFB, inplace=True)

# mengubah tipe data  STEROID, FATIGUE, MALAISE, ANOREXIA, LIVER BIG, LIVER FIRM, SPLEEN ALPABLE, SPIDERS, ASCITES, VARICES menjadi integer
df[[ 'STEROID', 'FATIGUE', 'MALAISE', 'ANOREXIA', 'LIVER BIG', 'LIVER FIRM', 'SPLEEN ALPABLE', 'SPIDERS', 'ASCITES', 'VARICES']]= df[[ 'STEROID', 'FATIGUE', 'MALAISE', 'ANOREXIA', 'LIVER BIG', 'LIVER FIRM', 'SPLEEN ALPABLE', 'SPIDERS', 'ASCITES', 'VARICES']].astype('int')

# BILIRUBIN, ALK PHOSPHATE, SGOT, ALBUMIN dan PROTIME menjadi float
df[["BILIRUBIN", "ALK PHOSPHATE", "SGOT", "ALBUMIN", "PROTIME"]] = df[["BILIRUBIN", "ALK PHOSPHATE", "SGOT", "ALBUMIN", "PROTIME"]].astype("float")

# mengecek apakah masih ada missing value atau tidak
df.isnull().sum()

# hasil keseluruhan tanpa missing value
df.head()

"""# **DATA NORMALIZATION**"""

#min-max untuk Class
df['Class'] = (df['Class']-df['Class'].min())/(df['Class'].max()-df['Class'].min())*(1-0)+0
#min-max untuk AGE
df['AGE'] = (df['AGE']-df['AGE'].min())/(df['AGE'].max()-df['AGE'].min())*(1-0)+0
#min-max untuk SEX
df['SEX'] = (df['SEX']-df['SEX'].min())/(df['SEX'].max()-df['SEX'].min())*(1-0)+0
#min-max untuk STEROID
df['STEROID'] = (df['STEROID']-df['STEROID'].min())/(df['STEROID'].max()-df['STEROID'].min())*(1-0)+0
#min-max untuk ANTIVIRALS
df['ANTIVIRALS'] = (df['ANTIVIRALS']-df['ANTIVIRALS'].min())/(df['ANTIVIRALS'].max()-df['ANTIVIRALS'].min())*(1-0)+0
#min-max untuk FATIGUE
df['FATIGUE'] = (df['FATIGUE']-df['FATIGUE'].min())/(df['FATIGUE'].max()-df['FATIGUE'].min())*(1-0)+0
#min-max untuk MALAISE
df['MALAISE'] = (df['MALAISE']-df['MALAISE'].min())/(df['MALAISE'].max()-df['MALAISE'].min())*(1-0)+0
#min-max untuk ANOREXIA
df['ANOREXIA'] = (df['ANOREXIA']-df['ANOREXIA'].min())/(df['ANOREXIA'].max()-df['ANOREXIA'].min())*(1-0)+0
#min-max untuk LIVER BIG
df['LIVER BIG'] = (df['LIVER BIG']-df['LIVER BIG'].min())/(df['LIVER BIG'].max()-df['LIVER BIG'].min())*(1-0)+0
#min-max untuk LIVER FIRM
df['LIVER FIRM'] = (df['LIVER FIRM']-df['LIVER FIRM'].min())/(df['LIVER FIRM'].max()-df['LIVER FIRM'].min())*(1-0)+0
#min-max untuk SPLEEN ALPABLE
df['SPLEEN ALPABLE'] = (df['SPLEEN ALPABLE']-df['SPLEEN ALPABLE'].min())/(df['SPLEEN ALPABLE'].max()-df['SPLEEN ALPABLE'].min())*(1-0)+0
#min-max untuk SPIDERS
df['SPIDERS'] = (df['SPIDERS']-df['SPIDERS'].min())/(df['SPIDERS'].max()-df['SPIDERS'].min())*(1-0)+0
#min-max untuk ASCITES
df['ASCITES'] = (df['ASCITES']-df['ASCITES'].min())/(df['ASCITES'].max()-df['ASCITES'].min())*(1-0)+0
#min-max untuk VARICES
df['VARICES'] = (df['VARICES']-df['VARICES'].min())/(df['VARICES'].max()-df['VARICES'].min())*(1-0)+0
#min-max untuk BILIRUBIN
df['BILIRUBIN'] = (df['BILIRUBIN']-df['BILIRUBIN'].min())/(df['BILIRUBIN'].max()-df['BILIRUBIN'].min())*(1-0)+0
#min-max untuk ALK PHOSPHATE
df['ALK PHOSPHATE'] = (df['ALK PHOSPHATE']-df['ALK PHOSPHATE'].min())/(df['ALK PHOSPHATE'].max()-df['ALK PHOSPHATE'].min())*(1-0)+0
#min-max untuk SGOT
df['SGOT'] = (df['SGOT']-df['SGOT'].min())/(df['SGOT'].max()-df['SGOT'].min())*(1-0)+0
#min-max untuk ALBUMIN
df['ALBUMIN'] = (df['ALBUMIN']-df['ALBUMIN'].min())/(df['ALBUMIN'].max()-df['ALBUMIN'].min())*(1-0)+0
#min-max untuk PROTIME
df['PROTIME'] = (df['PROTIME']-df['PROTIME'].min())/(df['PROTIME'].max()-df['PROTIME'].min())*(1-0)+0
#min-max untuk HISTOLOGY
df['HISTOLOGY'] = (df['HISTOLOGY']-df['HISTOLOGY'].min())/(df['HISTOLOGY'].max()-df['HISTOLOGY'].min())*(1-0)+0

# Hasil
df.head()

"""# **Deduplikasi Data**"""

# Melihat Ukuran data frame
df.shape
# mengecek apakah ada duplikasi data
df.duplicated(subset=None)
# menghapus row/baris yang duplikat
df.drop_duplicates()

# Hasil
df.head()

"""# **Naive Bayes**"""

from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import CategoricalNB

model_gnb  = CategoricalNB()

model_gnb.fit(df[['SEX' , 'STEROID', 'ANTIVIRALS', 'FATIGUE','MALAISE','ANOREXIA','LIVER BIG','LIVER FIRM','SPLEEN ALPABLE',
'SPIDERS','ASCITES','VARICES', 'HISTOLOGY']], df['Class'])

X_train, X_test, y_train, y_test = train_test_split(df[['SEX' , 'STEROID', 'ANTIVIRALS', 'FATIGUE','MALAISE','ANOREXIA','LIVER BIG','LIVER FIRM','SPLEEN ALPABLE',
'SPIDERS','ASCITES','VARICES', 'HISTOLOGY']], df['Class'], test_size=0.3, random_state=0)
model_gnb.fit(X_train , y_train)

kelas_test=model_gnb.predict(X_test)
kelas_test

y_test

from sklearn.metrics import accuracy_score
accuracy_score(y_test, kelas_test)